name: "Check gpg expiry"

on:
  schedule:
    - cron: '0 1 * * 0' #Sunday at 1am

jobs:
  variables:
    runs-on: ubuntu-latest
    outputs:
      encGPG: ${{ steps.config.outputs.encGPG }}
      pubGPG: ${{ steps.config.outputs.pubGPG }}
      name: ${{ steps.config.outputs.name }}
      email: ${{ steps.config.outputs.email }}
      repoName: ${{ steps.config.outputs.repoName}}
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    - id: config
      run: |
        getVal(){
          if [ ! -f config.json ]; then
            echo "::set-output name=${1}::${2}"
            return
          fi
          val=`cat config.json | jq -r .${1}`
          if [ "${val}" == "null" ]; then
            echo "::set-output name=${1}::${2}"
            return
          fi
          echo "::set-output name=${1}::${val}"
        }
        getVal encGPG key.gpg.enc
        getVal pubGPG public.gpg
        getVal name "GitHub Action"
        getVal email github-action@users.noreply.github.com
        getVal repoName aur

  updateExpiry:
    runs-on: ubuntu-latest
    needs: variables
    steps:
      - uses: actions/checkout@v2
      - id: vars
        run: |
          if [ -z "${{ secrets.ENCRYPTION_KEY }}" ]; then
            echo "::set-output name=run::false"
          else
            if [ -f "${{ needs.variables.outputs.encGPG }}" ]; then
              echo "::set-output name=run::true"
            else
              echo "::set-output name=run::gen"
            fi
          fi
      - name: Import Keys
        if: ${{ steps.vars.outputs.run == 'true' }}
        run: |
          openssl aes-256-cbc -d -a -pbkdf2 -in ${{ needs.variables.outputs.encGPG }} -pass pass:${{ secrets.ENCRYPTION_KEY }} | gpg --import
          if [ -f "${{ needs.variables.outputs.pubGPG }}" ]; then
            cat ${{ needs.variables.outputs.pubGPG }} | gpg --import
          fi
      - name: Generate GPG Key
        if: ${{ steps.vars.outputs.run == 'gen' }}
        run: |
          gpg --full-generate-key --expert --batch <<-END
          %no-protection
          Key-Type: eddsa
          Key-Curve: Ed25519
          Key-Usage: sign
          Name-Real: ${{ needs.variables.outputs.name }}
          Name-Email: ${{ needs.variables.outputs.email }}
          Expire-Date: 3m
          %commit
          END
      - id: check
        if: ${{ steps.vars.outputs.run != 'false' }}
        run: |
          echo "::set-output name=keyId::$(gpg --list-secret-keys --keyid-format=long ${{ needs.variables.outputs.email }} | grep 'sec' | awk 'match($0, /[0-9A-Z]{16}/) {print substr($0, RSTART, RLENGTH)}')"
          expiry=`gpg --list-secret-keys --keyid-format=long ${{ needs.variables.outputs.email }} | grep 'sec' | awk 'match ($6, /[0-9-]{10}/){print substr($6, RSTART, RLENGTH)}'`
          echo "Key Expires on ${expiry}"
          dtSec=$(date --date "$expiry" +'%s')    # For "now", use $(date +'%s')
          taSec=$(date --date "30 days" +'%s')
          if [ $dtSec -lt $taSec ]; then
            echo "::set-output name=update::true"
          else
            echo "::set-output name=update::false"
          fi
      - name: Update Expiry
        if: ${{ steps.vars.outputs.run != 'false' && steps.check.outputs.update == 'true' }}
        run: |
          gpg --batch --command-fd 0 --edit-key ${{ steps.check.outputs.keyId }} <<-END
          expire
          3m
          save
          END
      - name: Export Keys
        if: ${{ steps.vars.outputs.run == 'gen' || steps.check.outputs.update == 'true' }}
        run: |
          rm ${{ needs.variables.outputs.encGPG }} ${{ needs.variables.outputs.pubGPG }}
          gpg --armor --export-secret-key ${{ steps.check.outputs.keyId }} | openssl aes-256-cbc -a -salt -pbkdf2 -out ${{ needs.variables.outputs.encGPG }} -pass pass:${{ secrets.ENCRYPTION_KEY }}
          gpg --batch --output ${{ needs.variables.outputs.pubGPG }} --armor --export ${{ steps.check.outputs.keyId }}
      - name: Push Changes
        if: ${{ steps.vars.outputs.run == 'gen' || steps.check.outputs.update == 'true' }}
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add ${{ needs.variables.outputs.encGPG }} ${{ needs.variables.outputs.pubGPG }}
          git commit -m "Update GPG Key"
          git push -u origin master
      - name: Rebuild Repo
        if: ${{ steps.vars.outputs.run == 'gen' || steps.check.outputs.update == 'true' }}
        uses: dev-drprasad/delete-tag-and-release@v0.2.1
        with:
          delete_release: true # default: false
          tag_name: repository
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}