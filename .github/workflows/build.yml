on:
  push:
    branches:
      - master
      - dependabot/submodules/*
    paths-ignore:
      - README.md

jobs:
  variables:
    runs-on: ubuntu-latest
    outputs:
      encGPG: ${{ steps.config.outputs.encGPG }}
      pubGPG: ${{ steps.config.outputs.pubGPG }}
      name: ${{ steps.config.outputs.name }}
      email: ${{ steps.config.outputs.email }}
      repoName: ${{ steps.config.outputs.repoName}}

      packager: ${{ steps.packager.outputs.packager }}

      matrix: ${{ steps.set-matrix.outputs.matrix }}
      rebuild: ${{ steps.set-matrix.outputs.rebuild }}
      removed: ${{ steps.set-matrix.outputs.removed }}
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
        fetch-depth: 0
    - id: config
      run: |
        getVal(){
          if [ ! -f config.json ]; then
            echo "::set-output name=${1}::${2}"
            return
          fi
          val=`cat config.json | jq -r .${1}`
          if [ "${val}" == "null" ]; then
            echo "::set-output name=${1}::${2}"
            return
          fi
          echo "::set-output name=${1}::${val}"
        }
        getVal encGPG key.gpg.enc
        getVal pubGPG public.gpg
        getVal name "GitHub Action"
        getVal email github-action@users.noreply.github.com
        getVal repoName aur
    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v29.0.4
    - id: set-matrix
      run: |
          REBUILD=false
          build=()
          for file in ${{ steps.changed-files.outputs.added_files }} ${{ steps.changed-files.outputs.modified_files }}; do
            for f in config.json ${{ steps.config.outputs.encGPG }}; do
              if [ "$file" == "$f" ]; then
                REBUILD=true
              fi
            done
            if [ -f "`dirname $file`/PKGBUILD" ]; then
              if [[ ! "${build[*]}" =~ "`dirname $file`" ]]; then
                build += `dirname $file`
              fi
            fi
            echo "$file was changed"
          done
          removed=()
          for file in ${{ steps.changed-files.outputs.deleted_files }}; do
            if [ -f "`dirname $file`/PKGBUILD" ]; then
              if [[ ! "${removed[*]}" =~ "`dirname $file`" ]]; then
                removed += `dirname $file`
              fi
            fi
          done
          echo "::set-output name=removed::`echo -n \"${removed[@]}\" | jq -R -s -c 'split(\" \")'`"
          echo ":set-output name=rebuild::$REBUILD"
          if [ $REBUILD ]; then
            echo "::set-output name=matrix::`find . -iname 'PKGBUILD' -exec bash -c \"basename \\$(dirname \\"{}\\")\" \\; | jq -R -s -c 'split(\"\n\")[:-1]'`"
          else
            echo "::set-output name=matrix::`echo -n \"${build[@]}\" | jq -R -s -c 'split(\" \")'`"
          fi
    - id: packager
      run: echo "::set-output name=packager::${{ steps.config.outputs.name }} <${{ steps.config.outputs.email }}>"

  rebuild-repo:
    runs-on: ubuntu-latest
    needs: variables

    steps:
    - if: ${{ needs.variables.outputs.rebuild == 'true' }}
      uses: dev-drprasad/delete-tag-and-release@v0.2.0
      with:
        delete_release: true
        tag_name: repository
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  remove-packages:
    runs-on: ubuntu-latest
    needs: variables

    if: ${{ fromJson(needs.variables.outputs.removed).length >= 1 }}

    strategy:
      max-parallel: 1
      matrix:
        package: ${{fromJson(needs.variables.outputs.removed)}}

    steps:
    - uses: mknejp/delete-release-assets@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: repository
        assets: ${{ matrix.package }}*
    - name: Get current version
      continue-on-error: true
      uses: robinraju/release-downloader@v1.4
      with:
        latest: true
        fileName: ${{ needs.variables.outputs.repoName }}.*
        tarBall: false
        zipBall: false
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: "Remove Package"
      uses: ./.github/actions/archlinux
      with:
        script: exec
        args: repo-remove ${{ matrix.package }}
    - uses: svenstaro/upload-release-action@v2
      continue-on-error: true
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        tag: repository
        file: '${{ needs.variables.outputs.repoName }}.*'
        file_glob: true
        overwrite: true

  build-package:
    runs-on: ubuntu-latest
    needs: variables

    if: ${{ fromJson(needs.variables.outputs.matrix).length >= 1 }}

    strategy:
      max-parallel: 1
      matrix:
        package: ${{fromJson(needs.variables.outputs.matrix)}}
    
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Get current repo
      continue-on-error: true
      uses: robinraju/release-downloader@v1.4
      with:
        latest: true
        fileName: ${{ needs.variables.outputs.repoName }}*
        tarBall: false
        zipBall: false
        token: ${{ secrets.GITHUB_TOKEN }}
    - run: rm *.sig
    - name: Build ${{ matrix.package }}
      uses: ./.github/actions/makepkg
      with:
        package: ${{ matrix.package }}
        token: ${{ secrets.GITHUB_TOKEN }}
        packager: ${{ needs.variables.outputs.packager }}
        secret: ${{ secrets.ENCRYPTION_KEY }}
    - name: "Update Repo"
      uses: ./.github/actions/archlinux
      with:
        packager: ${{ needs.variables.outputs.packager }}
        script: repo-add
        args: ${{ matrix.package }}*.pkg.*
    - name: "Cleanup old files"
      run: rm -f *.old *.old.sig
    - name: "Sign Repo"
      uses: ./.github/actions/sign
      with:
        secret: ${{ secrets.ENCRYPTION_KEY }}
        gpgkey: ${{ needs.variables.outputs.encGPG }}
        file: '${{ needs.variables.outputs.repoName }}.db'

    - uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        tag: repository
        file: '${{ matrix.package }}*.pkg.*'
        file_glob: true
        overwrite: false
    - uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        tag: repository
        file: '${{ needs.variables.outputs.repoName }}.*'
        file_glob: true
        overwrite: true