on:
#  release:
#    types:
#      - deleted
  workflow_dispatch:
    inputs:
      package:
        description: "Package to Build"
        type: string
  push:
    branches:
      - master
    paths-ignore:
      - README.md

concurrency:
  group: "release"

jobs:
  variables:
    runs-on: ubuntu-latest
    outputs:
      encGPG: ${{ steps.config.outputs.encGPG }}
      pubGPG: ${{ steps.config.outputs.pubGPG }}
      name: ${{ steps.config.outputs.name }}
      email: ${{ steps.config.outputs.email }}
      repoName: ${{ steps.config.outputs.repoName}}

      packager: ${{ steps.packager.outputs.packager }}

      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
        fetch-depth: 0
        ref: master
    - id: config
      run: |
        set_output () {
          if [[ -z "${ACT}" ]]; then
            echo "${1}=${2}" | tee -a "${GITHUB_OUTPUT}"
          else
            echo "set-output name=${1}::${2}"
            echo "::set-output name=${1}::${2}"
          fi
        }
        getVal(){
          if [ ! -f config.json ]; then
            set_output ${1} ${2}
            return
          fi
          val=`cat config.json | jq -r .${1}`
          if [ "${val}" == "null" ]; then
            set_output ${1} ${2}
            return
          fi
          set_output ${1} $val
        }
        getVal encGPG key.gpg.enc
        getVal pubGPG public.gpg
        getVal name "GitHub Action"
        getVal email github-action@users.noreply.github.com
        getVal repoName aur
    - id: set-matrix
      run: |
        set_output () {
          if [[ -z "${ACT}" ]]; then
            echo "${1}=${2}" | tee -a "${GITHUB_OUTPUT}"
          else
            echo "set-output name=${1}::${2}"
            echo "::set-output name=${1}::${2}"
          fi
        }
        if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ "{{ github.event.inputs.package }}" != "" ]; then
          set_output matrix [\"${{ github.event.inputs.package }}\"]
        else
          set_output matrix "`find . -iname 'PKGBUILD' -exec bash -c \"basename \\$(dirname \\"{}\\")\" \\; | jq -R -s -c 'split(\"\n\")[:-1]'`"
        fi
    - id: packager
      run: |
        set_output () {
          if [[ -z "${ACT}" ]]; then
            echo "${1}=${2}" | tee -a "${GITHUB_OUTPUT}"
          else
            echo "set-output name=${1}::${2}"
            echo "::set-output name=${1}::${2}"
          fi
        }
        set_output packager "${{ steps.config.outputs.name }} <${{ steps.config.outputs.email }}>"

  updateExpiry:
    runs-on: ubuntu-latest
    needs: variables
    steps:
      - uses: actions/checkout@v2
      - id: vars
        run: |
          if [ -z "${{ secrets.ENCRYPTION_KEY }}" ]; then
            echo "::set-output name=run::false"
          else
            if [ -f "${{ needs.variables.outputs.encGPG }}" ]; then
              echo "::set-output name=run::true"
            else
              echo "::set-output name=run::gen"
            fi
          fi
      - name: Import Keys
        if: ${{ steps.vars.outputs.run == 'true' }}
        run: |
          openssl aes-256-cbc -d -a -pbkdf2 -in ${{ needs.variables.outputs.encGPG }} -pass pass:${{ secrets.ENCRYPTION_KEY }} | gpg --import
          if [ -f "${{ needs.variables.outputs.pubGPG }}" ]; then
            cat ${{ needs.variables.outputs.pubGPG }} | gpg --import
          fi
      - name: Generate GPG Key
        if: ${{ steps.vars.outputs.run == 'gen' }}
        run: |
          gpg --full-generate-key --expert --batch <<-END
          %no-protection
          Key-Type: eddsa
          Key-Curve: Ed25519
          Key-Usage: sign
          Name-Real: ${{ needs.variables.outputs.name }}
          Name-Email: ${{ needs.variables.outputs.email }}
          Expire-Date: 3m
          %commit
          END
      - id: check
        if: ${{ steps.vars.outputs.run != 'false' }}
        run: |
          echo "::set-output name=keyId::$(gpg --list-secret-keys --keyid-format=long ${{ needs.variables.outputs.email }} | grep 'sec' | awk 'match($0, /[0-9A-Z]{16}/) {print substr($0, RSTART, RLENGTH)}')"
          expiry=`gpg --list-secret-keys --keyid-format=long ${{ needs.variables.outputs.email }} | grep 'sec' | awk 'match ($6, /[0-9-]{10}/){print substr($6, RSTART, RLENGTH)}'`
          echo "Key Expires on ${expiry}"
          dtSec=$(date --date "$expiry" +'%s')    # For "now", use $(date +'%s')
          taSec=$(date --date "30 days" +'%s')
          if [ $dtSec -lt $taSec ]; then
            echo "::set-output name=update::true"
          else
            echo "::set-output name=update::false"
          fi
      - name: Update Expiry
        if: ${{ steps.vars.outputs.run != 'false' && steps.check.outputs.update == 'true' }}
        run: |
          gpg --batch --command-fd 0 --edit-key ${{ steps.check.outputs.keyId }} <<-END
          expire
          3m
          save
          END
      - name: Export Keys
        if: ${{ steps.vars.outputs.run == 'gen' || steps.check.outputs.update == 'true' }}
        run: |
          rm ${{ needs.variables.outputs.encGPG }} ${{ needs.variables.outputs.pubGPG }}
          gpg --armor --export-secret-key ${{ steps.check.outputs.keyId }} | openssl aes-256-cbc -a -salt -pbkdf2 -out ${{ needs.variables.outputs.encGPG }} -pass pass:${{ secrets.ENCRYPTION_KEY }}
          gpg --batch --output ${{ needs.variables.outputs.pubGPG }} --armor --export ${{ steps.check.outputs.keyId }}
      - name: Push Changes
        if: ${{ steps.vars.outputs.run == 'gen' || steps.check.outputs.update == 'true' }}
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add ${{ needs.variables.outputs.encGPG }} ${{ needs.variables.outputs.pubGPG }}
          git commit -m "Update GPG Key"
          git push -u origin master
      - name: Rebuild Repo
        if: ${{ steps.vars.outputs.run == 'gen' || steps.check.outputs.update == 'true' }}
        uses: dev-drprasad/delete-tag-and-release@v0.2.0
        with:
          delete_release: true # default: false
          tag_name: repository
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-package:
    runs-on: ubuntu-latest
    continue-on-error: true
    needs: 
      - variables
      - updateExpiry

    strategy:
      matrix:
        package: ${{ fromJson(needs.variables.outputs.matrix) }}
    
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
        ref: master
    - name: Get current version ${{ matrix.package }}
      continue-on-error: true
      uses: robinraju/release-downloader@v1.7
      with:
        latest: true
        fileName: ${{ matrix.package }}*
        tarBall: false
        zipBall: false
        out-file-path: ${{ matrix.package }}
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Build ${{ matrix.package }}
      uses: ./.github/actions/archlinux
      env:
        PACKAGER: ${{ needs.variables.outputs.packager }}
        SECRET: ${{ secrets.ENCRYPTION_KEY }}
        GPGKEY: ${{ needs.variables.outputs.encGPG }}
      with:
        dir: ${{ matrix.package }}
        run: makepkg -sr --sign -C -c --noconfirm --noprogressbar
    - name: Get current repo
      continue-on-error: true
      uses: robinraju/release-downloader@v1.7
      with:
        latest: true
        fileName: ${{ needs.variables.outputs.repoName }}.db.tar.gz
        out-file-path: ${{ matrix.package }}
        tarBall: false
        zipBall: false
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Remove old package from directory
      uses: ./.github/actions/archlinux
      env:
        PACKAGER: ${{ needs.variables.outputs.packager }}
      with:
        dir: ${{ matrix.package }}
        run: repo-add -q --nocolor -n -R ${{ needs.variables.outputs.repoName }}.db.tar.gz ${{ matrix.package }}*.pkg.tar.zst
    - name: Delete old package ${{ matrix.package }}
      continue-on-error: true
      uses: mknejp/delete-release-assets@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: repository
        assets: ${{ matrix.package }}*
    - name: Upload new package ${{ matrix.package }}
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        tag: repository
        file: ${{ matrix.package }}/*.pkg.*
        file_glob: true
        overwrite: false

  build-repo:
    runs-on: "ubuntu-latest"
    needs: 
      - variables
      - build-package
      - updateExpiry

    steps:
    - uses: actions/checkout@v3
      with:
        ref: master
    - name: Get current packages
      continue-on-error: true
      uses: robinraju/release-downloader@v1.7
      with:
        latest: true
        fileName: '*.pkg.*'
        tarBall: false
        zipBall: false
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Build Repo
      uses: ./.github/actions/archlinux
      env:
        PACKAGER: ${{ needs.variables.outputs.packager }}
        SECRET: ${{ secrets.ENCRYPTION_KEY }}
        GPGKEY: ${{ needs.variables.outputs.encGPG }}
      with:
        run: repo-add -s -q --nocolor -n -R ${{ needs.variables.outputs.repoName }}.db.tar.gz *.pkg.tar.zst
    - name: Upload new repo
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        tag: repository
        file: ${{ needs.variables.outputs.repoName }}.db*
        file_glob: true
        overwrite: true
